on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - '**'

name: CI

jobs:
  audit:
    name: Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: rustfmt

      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: clippy

      - name: Install Clippy
        run: rustup component add clippy

      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true

      - uses: actions-rs/install@v0.1
        with:
          crate: cargo-tarpaulin
          version: latest
          use-tool-cache: true

        # Needed by `font-kit`
      - &install_development_packages
        name: Install Development Packages
        run: >-
          sudo apt install -y
          pkg-config
          libfreetype6-dev
          libfontconfig1-dev

      - name: Install XVFB
        run: >-
          sudo apt install -y
          xvfb
          libgl1-mesa-dev
          libgl1-mesa-glx
          mesa-utils

      - name: 'Run `cargo-tarpaulin`'
        run: >-
          /usr/bin/xvfb-run
          --auto-servernum
          --server-args="-screen 0 1280x1024x24+32 -pixdepths 3 27 32 -ac +extension GLX +render -noreset"
          cargo tarpaulin

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v1
        with:
          file: ./target/tarpaulin/cobertura.xml

  build_and_test_linux:
    name: Build and Test (Linux)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - *install_development_packages

      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --release

  build_and_test_windows:
    name: Build and Test (Windows)
    runs-on: windows-latest
    timeout-minutes: 10
    steps:
      - name: Prepare symlink configuration
        run: git config --global core.symlinks true

      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --release

  build_examples_linux:
    name: Build examples (Linux)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - *install_development_packages

      - name: 'Build examples'
        run: |
          for example in $(ls examples)
          do cargo build --package "${example}"
          done

  build_examples_wasm:
    name: Build examples (WASM)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: 'Install `wasm-pack`'
        uses: jetli/wasm-pack-action@v0.3.0
        with:
          version: 'latest'

      - name: 'Build examples'
        run: |
          for example in $(ls examples)
          do wasm-pack build --target web --out-dir "../../doc/src/pkg" "examples/${example}"
          done
